services:
  db:
    image: postgres:15-alpine
    container_name: pandoragym_db_prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-pandoragym_db}
      POSTGRES_USER: ${DATABASE_USER:-pandoragym}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-pandoragym} -d ${DATABASE_NAME:-pandoragym_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - pandoragym-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: pandoragym_app_prod
    ports:
      - "${APP_PORT:-3333}:3333"
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER:-pandoragym}:${DATABASE_PASSWORD:-password}@db:5432/${DATABASE_NAME:-pandoragym_db}?sslmode=disable
      - PORT=3333
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ENV=production
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - pandoragym-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Optional: Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: pandoragym_redis_prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - pandoragym-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Uncomment if you want to use Redis with password
    # command: redis-server --requirepass ${REDIS_PASSWORD}

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pandoragym_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - pandoragym-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  pandoragym-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
